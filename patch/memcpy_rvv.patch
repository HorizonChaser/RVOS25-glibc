diff --color -u -r -p -N '--exclude=autom4te.cache' '--exclude=.vscode' glibc-2.41/config.h.in glibc-2.41-patched/config.h.in
--- glibc-2.41/config.h.in	2025-01-29 01:31:33.000000000 +0800
+++ glibc-2.41-patched/config.h.in	2025-05-27 23:47:18.775395328 +0800
@@ -139,6 +139,10 @@
 /* RISC-V floating-point ABI for ld.so.  */
 #undef RISCV_ABI_FLEN
 
+/* NEW */
+/* Define if assembler supports vector instructions on RISC-V.  */
+#undef HAVE_RISCV_ASM_VECTOR_SUPPORT
+
 /* LOONGARCH integer ABI for ld.so.  */
 #undef LOONGARCH_ABI_GRLEN
 
diff --color -u -r -p -N '--exclude=autom4te.cache' '--exclude=.vscode' glibc-2.41/sysdeps/riscv/configure glibc-2.41-patched/sysdeps/riscv/configure
--- glibc-2.41/sysdeps/riscv/configure	2025-01-29 01:31:33.000000000 +0800
+++ glibc-2.41-patched/sysdeps/riscv/configure	2025-05-27 23:47:21.135442533 +0800
@@ -78,6 +78,39 @@ fi
 { printf "%s\n" "$as_me:${as_lineno-$LINENO}: result: $libc_cv_static_pie_on_riscv" >&5
 printf "%s\n" "$libc_cv_static_pie_on_riscv" >&6; }
 
+{ printf "%s\n" "$as_me:${as_lineno-$LINENO}: checking for gcc attribute riscv vector support" >&5
+printf %s "checking for gcc attribute riscv vector support... " >&6; }
+if test ${libc_cv_gcc_rvv+y}
+then :
+  printf %s "(cached) " >&6
+else case e in #(
+  e) cat > conftest.S <<EOF
+foo:
+.option push
+.option arch, +v
+vsetivli t0, 8, e8, m8, ta, ma
+.option pop
+ret
+EOF
+libc_cv_gcc_rvv=no
+if ${CC-asm} -c conftest.S -o conftest.o 1>&5 \
+2>&5 ; then
+libc_cv_gcc_rvv=yes
+fi
+rm -f conftest* ;;
+esac
+fi
+{ printf "%s\n" "$as_me:${as_lineno-$LINENO}: result: $libc_cv_gcc_rvv" >&5
+printf "%s\n" "$libc_cv_gcc_rvv" >&6; }
+
+if test x"$libc_cv_gcc_rvv" = xyes; then
+printf "%s\n" "#define HAVE_RISCV_ASM_VECTOR_SUPPORT 1" >>confdefs.h
+
+fi
+
+config_vars="$config_vars
+have-gcc-riscv-rvv = $libc_cv_gcc_rvv"
+
 if test "$libc_cv_static_pie_on_riscv" = yes; then
   printf "%s\n" "#define SUPPORT_STATIC_PIE 1" >>confdefs.h
 
diff --color -u -r -p -N '--exclude=autom4te.cache' '--exclude=.vscode' glibc-2.41/sysdeps/riscv/configure.ac glibc-2.41-patched/sysdeps/riscv/configure.ac
--- glibc-2.41/sysdeps/riscv/configure.ac	2025-01-29 01:31:33.000000000 +0800
+++ glibc-2.41-patched/sysdeps/riscv/configure.ac	2025-05-27 23:47:21.135442533 +0800
@@ -40,6 +40,29 @@ EOF
   fi
   rm -rf conftest* ])
 
+AC_CACHE_CHECK([for gcc attribute riscv vector support],
+libc_cv_gcc_rvv, [dnl
+cat > conftest.S <<EOF
+foo:
+.option push
+.option arch, +v
+vsetivli t0, 8, e8, m8, ta, ma
+.option pop
+ret
+EOF
+libc_cv_gcc_rvv=no
+if ${CC-asm} -c conftest.S -o conftest.o 1>&AS_MESSAGE_LOG_FD \
+2>&AS_MESSAGE_LOG_FD ; then
+libc_cv_gcc_rvv=yes
+fi
+rm -f conftest*])
+
+if test x"$libc_cv_gcc_rvv" = xyes; then
+AC_DEFINE(HAVE_RISCV_ASM_VECTOR_SUPPORT)
+fi
+
+LIBC_CONFIG_VAR([have-gcc-riscv-rvv], [$libc_cv_gcc_rvv])
+
 if test "$libc_cv_static_pie_on_riscv" = yes; then
   AC_DEFINE(SUPPORT_STATIC_PIE)
 fi
diff --color -u -r -p -N '--exclude=autom4te.cache' '--exclude=.vscode' glibc-2.41/sysdeps/riscv/multiarch/memcpy_vector.c glibc-2.41-patched/sysdeps/riscv/multiarch/memcpy_vector.c
--- glibc-2.41/sysdeps/riscv/multiarch/memcpy_vector.c	1970-01-01 08:00:00.000000000 +0800
+++ glibc-2.41-patched/sysdeps/riscv/multiarch/memcpy_vector.c	2025-05-27 23:47:21.155442932 +0800
@@ -0,0 +1,108 @@
+#include<stdint.h>
+#include<stddef.h>
+
+void* __memcpy_vector(void* dst, const void* src, size_t len) {
+    void* original_dst = dst;
+    uint8_t* dst_u8 = (uint8_t*)dst;
+    const uint8_t* src_u8 = (const uint8_t*)src;
+    size_t vlenb;
+
+    // 获取硬件支持的单个向量寄存器的长度, 单位字节
+    asm volatile("csrr %0, vlenb" : "=r"(vlenb));
+
+    // 如果长度小于16字节，直接使用字节拷贝, 类似原始版本的 memcpy
+    if (len < 16) {
+        for (size_t i = 0; i < len; ++i)
+            dst_u8[i] = src_u8[i];
+        return original_dst;
+    }
+
+    // 确保两个指针都对齐到 8 字节
+    size_t head_len = 0;
+    if (((uintptr_t)dst_u8 % sizeof(unsigned long)) != 0) {
+        head_len = sizeof(unsigned long) - ((uintptr_t)dst_u8 % sizeof(unsigned long));
+        if (head_len > len)
+            head_len = len;
+
+        // 处理头部未对齐的字节
+        for (size_t i = 0; i < head_len; ++i)
+            dst_u8[i] = src_u8[i];
+        dst_u8 += head_len;
+        src_u8 += head_len;
+        len -= head_len;
+    }
+
+    // 向量化, 启动
+    if (len >= sizeof(unsigned long) && (((uintptr_t)src_u8 % sizeof(unsigned long)) == 0)) {
+        unsigned long* dst_ul = (unsigned long*)dst_u8;
+        const unsigned long* src_ul = (const unsigned long*)src_u8;
+        size_t num_ul = len / sizeof(unsigned long);
+        size_t current_vl_ul;
+        if (num_ul > 0) {
+            // 64-bit
+            if (sizeof(unsigned long) == 8) {
+                asm volatile(
+                    "1:\n" //循环开始
+                    "vsetvli %[vl], %[len_in_elements], e64, m8, ta, ma\n" //设置vl
+                    "beqz %[vl], 2f\n" //如果 vl == 0, 跳到 2, 也就是结束
+                    "vle64.v v0, (%[src_ptr])\n" // 从 src 读入数据到 v0
+                    "vse64.v v0, (%[dst_ptr])\n" // 从 v0 写入数据到 dst
+                    // 计算处理的字节数
+                    "slli %[processed_bytes], %[vl], 3\n"
+                    "add %[src_ptr], %[src_ptr], %[processed_bytes]\n"
+                    "add %[dst_ptr], %[dst_ptr], %[processed_bytes]\n"
+                    "sub %[len_in_elements], %[len_in_elements], %[vl]\n"
+                    "j 1b\n"
+                    "2:\n"
+                    : [vl] "=&r"(current_vl_ul), [len_in_elements] "+&r"(num_ul),
+                    [src_ptr] "+&r"(src_ul), [dst_ptr] "+&r"(dst_ul)
+                    : [processed_bytes] "r"(0)
+                    : "t0", "t1", "memory", "v0", "v1", "v2", "v3", "v4", "v5", "v6", "v7");
+            } else {
+                asm volatile(
+                    "1:\n"
+                    "vsetvli %[vl], %[len_in_elements], e32, m8, ta, ma\n"
+                    "beqz %[vl], 2f\n"
+                    "vle32.v v0, (%[src_ptr])\n"
+                    "vse32.v v0, (%[dst_ptr])\n"
+                    "slli %[processed_bytes], %[vl], 2\n"
+                    "add %[src_ptr], %[src_ptr], %[processed_bytes]\n"
+                    "add %[dst_ptr], %[dst_ptr], %[processed_bytes]\n"
+                    "sub %[len_in_elements], %[len_in_elements], %[vl]\n"
+                    "j 1b\n"
+                    "2:\n"
+                    : [vl] "=&r"(current_vl_ul), [len_in_elements] "+&r"(num_ul),
+                    [src_ptr] "+&r"(src_ul), [dst_ptr] "+&r"(dst_ul)
+                    : [processed_bytes] "r"(0)
+                    : "t0", "t1", "memory", "v0", "v1", "v2", "v3", "v4", "v5", "v6", "v7");
+            }
+            size_t bytes_processed_ul = (len / sizeof(unsigned long) - num_ul) * sizeof(unsigned long);
+            dst_u8 = (uint8_t*)dst_ul;
+            src_u8 = (const uint8_t*)src_ul;
+            len -= bytes_processed_ul;
+        }
+    }
+    // 如果还有剩余的字节，使用字节向量化拷贝
+    if (len > 0) {
+        size_t current_vl_u8;
+        uint8_t* dst_u8_asm = dst_u8;
+        const uint8_t* src_u8_asm = src_u8;
+        size_t len_asm = len;
+        asm volatile(
+            "1:\n"
+            "vsetvli %[vl], %[rem_len], e8, m8, ta, ma\n"
+            "beqz %[vl], 2f\n"
+            "vle8.v v0, (%[src_ptr])\n"
+            "vse8.v v0, (%[dst_ptr])\n"
+            "add %[src_ptr], %[src_ptr], %[vl]\n"
+            "add %[dst_ptr], %[dst_ptr], %[vl]\n"
+            "sub %[rem_len], %[rem_len], %[vl]\n"
+            "j 1b\n"
+            "2:\n"
+            : [vl] "=&r"(current_vl_u8), [rem_len] "+&r"(len_asm),
+            [src_ptr] "+&r"(src_u8_asm), [dst_ptr] "+&r"(dst_u8_asm)
+            :
+            : "t0", "memory", "v0", "v1", "v2", "v3", "v4", "v5", "v6", "v7");
+    }
+    return original_dst;
+}
\ No newline at end of file
diff --color -u -r -p -N '--exclude=autom4te.cache' '--exclude=.vscode' glibc-2.41/sysdeps/unix/sysv/linux/riscv/multiarch/ifunc-impl-list.c glibc-2.41-patched/sysdeps/unix/sysv/linux/riscv/multiarch/ifunc-impl-list.c
--- glibc-2.41/sysdeps/unix/sysv/linux/riscv/multiarch/ifunc-impl-list.c	2025-01-29 01:31:33.000000000 +0800
+++ glibc-2.41-patched/sysdeps/unix/sysv/linux/riscv/multiarch/ifunc-impl-list.c	2025-05-27 23:47:20.415428131 +0800
@@ -20,6 +20,9 @@
 #include <string.h>
 #include <sys/hwprobe.h>
 
+#include <ldsodefs.h>
+#include <asm/hwcap.h>
+
 size_t
 __libc_ifunc_impl_list (const char *name, struct libc_ifunc_impl *array,
 			size_t max)
@@ -28,6 +31,15 @@ __libc_ifunc_impl_list (const char *name
 
   bool fast_unaligned = false;
 
+  #if defined(HAVE_RISCV_ASM_VECTOR_SUPPORT)
+    bool rvv_ext = false;
+  #endif
+
+  #if defined(HAVE_RISCV_ASM_VECTOR_SUPPORT)
+    if (GLRO(dl_hwcap) & COMPAT_HWCAP_ISA_V)
+      rvv_ext = true;
+  #endif
+
   struct riscv_hwprobe pair = { .key = RISCV_HWPROBE_KEY_CPUPERF_0 };
   if (__riscv_hwprobe (&pair, 1, 0, NULL, 0) == 0
       && (pair.value & RISCV_HWPROBE_MISALIGNED_MASK)
@@ -35,6 +47,10 @@ __libc_ifunc_impl_list (const char *name
     fast_unaligned = true;
 
   IFUNC_IMPL (i, name, memcpy,
+    #if defined(HAVE_RISCV_ASM_VECTOR_SUPPORT)
+        IFUNC_IMPL_ADD(array, i, memcpy, rvv_ext,
+          __memcpy_vector)
+    #endif
 	      IFUNC_IMPL_ADD (array, i, memcpy, fast_unaligned,
 			      __memcpy_noalignment)
 	      IFUNC_IMPL_ADD (array, i, memcpy, 1, __memcpy_generic))
diff --color -u -r -p -N '--exclude=autom4te.cache' '--exclude=.vscode' glibc-2.41/sysdeps/unix/sysv/linux/riscv/multiarch/Makefile glibc-2.41-patched/sysdeps/unix/sysv/linux/riscv/multiarch/Makefile
--- glibc-2.41/sysdeps/unix/sysv/linux/riscv/multiarch/Makefile	2025-01-29 01:31:33.000000000 +0800
+++ glibc-2.41-patched/sysdeps/unix/sysv/linux/riscv/multiarch/Makefile	2025-05-27 23:47:20.415428131 +0800
@@ -5,5 +5,11 @@ sysdep_routines += \
   memcpy_noalignment \
   # sysdep_routines
 
+ifeq ($(have-gcc-riscv-rvv),yes)
+sysdep_routines += \
+  memcpy_vector \
+  # rvv sysdep_routines
+endif
+
 CFLAGS-memcpy_noalignment.c += -mno-strict-align
 endif
diff --color -u -r -p -N '--exclude=autom4te.cache' '--exclude=.vscode' glibc-2.41/sysdeps/unix/sysv/linux/riscv/multiarch/memcpy.c glibc-2.41-patched/sysdeps/unix/sysv/linux/riscv/multiarch/memcpy.c
--- glibc-2.41/sysdeps/unix/sysv/linux/riscv/multiarch/memcpy.c	2025-01-29 01:31:33.000000000 +0800
+++ glibc-2.41-patched/sysdeps/unix/sysv/linux/riscv/multiarch/memcpy.c	2025-05-27 23:47:20.415428131 +0800
@@ -27,16 +27,25 @@
 # include <ifunc-init.h>
 # include <riscv-ifunc.h>
 # include <sys/hwprobe.h>
+# include <asm/hwcap.h>
 
 extern __typeof (__redirect_memcpy) __libc_memcpy;
 
 extern __typeof (__redirect_memcpy) __memcpy_generic attribute_hidden;
 extern __typeof (__redirect_memcpy) __memcpy_noalignment attribute_hidden;
 
+extern __typeof(__redirect_memcpy) __memcpy_vector attribute_hidden;
+
 static inline __typeof (__redirect_memcpy) *
 select_memcpy_ifunc (uint64_t dl_hwcap, __riscv_hwprobe_t hwprobe_func)
 {
   unsigned long long int v;
+
+  #if defined(HAVE_RISCV_ASM_VECTOR_SUPPORT)
+    if (dl_hwcap & COMPAT_HWCAP_ISA_V)
+      return __memcpy_vector;
+  #endif
+
   if (__riscv_hwprobe_one (hwprobe_func, RISCV_HWPROBE_KEY_CPUPERF_0, &v) == 0
       && (v & RISCV_HWPROBE_MISALIGNED_MASK) == RISCV_HWPROBE_MISALIGNED_FAST)
     return __memcpy_noalignment;
